#include<iostream>
#include<bits/stdc++.h> 
using namespace std;

void showlist(list <int> g) 
{ 
    list <int> :: iterator it; 
    for(it = g.begin(); it != g.end(); ++it) 
        cout << '\t' << *it; 
    cout << '\n'; 
} 

class graph
{
    
    public:
    
    vector<list<int>> vertices;
    graph(int x)
    {
    vertices.resize(x);
    }
    
    void addedge(int u,int v)
    {
        vertices[u].push_front(v);
        vertices[v].push_front(u);
    }
    void bfs()
    {
        cout<<"Executing BFS\n";
        queue<int> que;
        vector<int> visited;
        visited.push_back(0);
        cout<<"Expolring From \n0 ";
        for(auto k=vertices[0].begin();k!=vertices[0].end();k++)
        {
            que.push(*k);
        }
        auto it = visited.begin();
        while(que.size()!=0)
        {
            cout<<"Exploring From "<<que.front();
            visited.push_back(que.front());
            for(auto l=vertices[que.front()].begin();l!=vertices[que.front()].end();l++)
            {
                it = find(visited.begin(),visited.end(),*l);
                if(it==(visited.end()))
                {
                    cout<<*l<<"\t";
                    que.push(*l);   
                }
            }
            
            que.pop();
        }
    }
    
    void dfs()
    {
        cout<<"Executing dFS\n";
        stack<int> que;
        vector<int> visited;
        visited.push_back(0);
        cout<<"Expolring From \n0 ";
        for(auto k=vertices[0].begin();k!=vertices[0].end();k++)
        {
            que.push(*k);
        }
        auto it = visited.begin();
        while(que.size()!=0)
        {
            cout<<"Exploring From "<<que.top();
            visited.push_back(que.top());
            for(auto l=vertices[que.top()].begin();l!=vertices[que.top()].end();l++)
            {
                it = find(visited.begin(),visited.end(),*l);
                if(it==(visited.end()))
                {
                    cout<<*l<<"\t";
                    que.push(*l);   
                }
            }
            
            que.pop();
        }
    }
    void printadjacencylists()
    {
        
        for(int i=0;i<vertices.size();i++)
        {
        cout<<i<<" ";
        showlist(vertices[i]);
        }
    }
};

int main()
{
    graph first(5);
    first.addedge(0,1);
    first.addedge(1,2);
    first.addedge(1,3);
    first.addedge(3,4);
    //first.printadjacencylists();
    //first.bfs();
    first.dfs();
    return 0;
}
